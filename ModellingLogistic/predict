#!/usr/bin/env Rscript

library(rjson)
library(data.table)
library(tidyr)

fname_test <- dir(path = "./../model_inputs_outputs/inputs/data/testing/", pattern = "\\.csv$")
fname_testschema <- dir(path = "./../model_inputs_outputs/inputs/schema/", pattern = "\\.json$")
testdata <- fread(paste0("./../model_inputs_outputs/inputs/data/testing/",fname_test))

tdataschema <- fromJSON(file = paste0("./../model_inputs_outputs/inputs/schema/",fname_testschema))

# some of the column names do not follow r-naming convention : they have special characters which must be changed
names(testdata) <- gsub("%","x",names(testdata))

# select the ID column into a variable and drop it from the test data. 
# the variable created will be bound to the predicted probabilities 

#idfieldname <- tdataschema$inputDatasets$binaryClassificationBaseMainInput$idField
idfieldname <- tdataschema$id$name

# save the idField into a vector. We'll bind this to the prediction dataframe to ensure the predictions are returned in the same order of
# of the records in the original dataframe. 
# idfieldname <- as.symbol(idfieldname)
# idField <- testdata[,c(eval(idfieldname))]

# drop the ID column from the dataset, we don't need it for testing. 
#testdata <- subset(testdata,select = -c(eval(as.name(paste0(idfieldname)))))

source("preprocessor.R")
#preprocessing()

predictors <- preprocessing(fname_train=fname_test,fname_schema=fname_schema,genericdata=testdata,dataschema=tdataschema)[[3]]
resvar <- preprocessing(fname_train=fname_test,fname_schema=fname_schema,genericdata=testdata,dataschema=tdataschema)[[2]]
testdata_processed <- preprocessing(fname_train=fname_test,fname_schema=fname_schema,genericdata=testdata,dataschema=tdataschema)[[1]]

# load the trained model
reg_logistic <- readRDS("./../model_inputs_outputs/model/artifacts/model.rds")
saveRDS(idfieldname, "./../model_inputs_outputs/model/artifacts/id.rds")

first.class <- readRDS("./../model_inputs_outputs/model/artifacts/first_class.rds")
second.class <- readRDS("./../model_inputs_outputs/model/artifacts/second_class.rds")

testing <- function()
{
  df <- testdata_processed
  predictions <- predict(reg_logistic,df, type="response")
  thepredictions <- cbind(df, predictions)
  
  names(thepredictions)[names(thepredictions)=="predictions"] <- "predictedprobs"
  # names(thepredictions)[names(thepredictions) == 'V2'] <-  "predictedprobs"
  #indvars <- as.vector(predictors$fieldNames)
  #thepredictions <- setDT(thepredictions)[, !indvars, with=FALSE]
  thepredictions <- setDT(thepredictions)[, c(eval(idfieldname),"predictedprobs"), with=FALSE]

  #thepredictions <- setDT(thepredictions)[, c(eval(resvar),"predictedprobs"), with=FALSE]
  thepredictions <- setDT(thepredictions)[,predictedprobs := fifelse(predictedprobs < 0,0, predictedprobs)]
  thepredictions <- thepredictions[,predictions:=fifelse(predictedprobs < 0.5,eval(second.class),eval(first.class)),by=eval(idfieldname)]

  thepredictions <- setDT(thepredictions)[,c("predictions",eval(idfieldname),"predictedprobs"),with=FALSE]
  
  testpredictions <- tidyr::pivot_wider(thepredictions,names_from="predictions",values_from="predictedprobs")
  
  testpredictions <- as.data.frame(testpredictions)
  
  testpredictions[] <- lapply(testpredictions, function(x) {
    is.na(levels(x)) <- levels(x) == "NA"
    x
  }) 
  
  for(i in 1:nrow(testpredictions)){
    if(is.na(testpredictions[i,2])){
      testpredictions[i,2] <- 1 - testpredictions[i,3]
    }
  }
  
  for(i in 1:nrow(testpredictions)){
    if(is.na(testpredictions[i,3])){
      testpredictions[i,3] <- 1 - testpredictions[i,2]
    }
  }
  
  #testpredictions <- dcast(thepredictions,sample_id ~ predictions,value.var = "predictedprobs")
  #print(thepredictions)
  #thepredictions <- tidyr::pivot_wider(thepredictions,names_from=all_of(resvar),values_from="predictedprobs")
  # thepredictions <- setDT(thepredictions)[is.na(eval(second.class)),
  #                                         eval(second.class) := 1-!!as.name(paste0(first.class))][is.na(eval(first.class)),
  #                                                                                               eval(first.class) := 1-!!as.name(paste0(second.class))]
  
  write.csv(testpredictions,"./../model_inputs_outputs/outputs/predictions/predictions.csv")

}

testing()
