#!/usr/bin/env Rscript

library(rjson)
library(data.table)
library(tidyr)

fname_test <- dir(path = "./../ml_inputs_outputs/inputs/data/testing/", pattern = "\\_test_data_file.csv$")
fname_testschema <- dir(path = "./../ml_inputs_outputs/inputs/schema/", pattern = "\\_schema.json$")
testdata <- fread(paste0("./../ml_inputs_outputs/inputs/data/testing/",fname_test))

tdataschema <- fromJSON(file = paste0("./../ml_inputs_outputs/inputs/schema/",fname_testschema))

# some of the column names do not follow r-naming convention : they have special characters which must be changed
names(testdata) <- gsub("%","x",names(testdata))

# select the ID column into a variable and drop it from the test data. 
# the variable created will be bound to the predicted probabilities 

idfieldname <- tdataschema$inputDatasets$binaryClassificationBaseMainInput$idField

# save the idField into a vector. We'll bind this to the prediction dataframe to ensure the predictions are returned in the same order of
# of the records in the original dataframe. 
# idfieldname <- as.symbol(idfieldname)
# idField <- testdata[,c(eval(idfieldname))]

# drop the ID column from the dataset, we don't need it for testing. 
#testdata <- subset(testdata,select = -c(eval(as.name(paste0(idfieldname)))))

source("preprocessor.R")
#preprocessing()

predictors <- preprocessing(fname_train=fname_test,fname_schema=fname_schema,genericdata=testdata,dataschema=tdataschema)[[3]]
resvar <- preprocessing(fname_train=fname_test,fname_schema=fname_schema,genericdata=testdata,dataschema=tdataschema)[[2]]
testdata_processed <- preprocessing(fname_train=fname_test,fname_schema=fname_schema,genericdata=testdata,dataschema=tdataschema)[[1]]

# load the trained model
reg_logistic <- readRDS("./../ml_inputs_outputs/model/artifacts/model.rds")

testing <- function()
{
  df <- testdata_processed
  predictions <- predict(reg_logistic, newdata = df, type = "response")
  thepredictions <- cbind(df, predictions)
  names(thepredictions)[names(thepredictions)=="predictions"] <- "predictedprobs"
  # names(thepredictions)[names(thepredictions) == 'V2'] <-  "predictedprobs"
  indvars <- as.vector(predictors$fieldNames)
  #thepredictions <- setDT(thepredictions)[, !indvars, with=FALSE]
  thepredictions <- setDT(thepredictions)[, c(eval(resvar),eval(idfieldname),"predictedprobs"), with=FALSE]

  #thepredictions <- dcast(thepredictions, eval(idfieldname) ~ eval(resvar), value.var = "predictedprobs")

  thepredictions <- tidyr::pivot_wider(thepredictions,names_from=all_of(resvar),values_from="predictedprobs")
  thepredictions <- setDT(thepredictions)[is.na(`1`),`1` := 1-`0`][is.na(`0`),`0` := 1-`1`]
  write.csv(thepredictions,"./../ml_inputs_outputs/outputs/predictions/testpredictions.csv")

}

testing()
