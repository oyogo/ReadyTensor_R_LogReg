#!/usr/bin/env Rscript
library(data.table) # Opted for this, 1. Because its really fast 2. dplyr conflicted with plumber
library(rjson) # for handling json data

# use pattern to read data : this is to make the model generic 
fname_train <- dir(path = "./ml_vol/inputs/data/training/binaryClassificationBaseMainInput/", pattern = "\\_train.csv$")
fname_schema <- dir(path = "./ml_vol/inputs/data_config/", pattern = "\\_schema.json$")

# import the training data 
genericdata <- fread(paste0("./ml_vol/inputs/data/training/binaryClassificationBaseMainInput/",fname_train))

# read in the schema so that we extract the response variable
dataschema <- fromJSON(file = paste0("./ml_vol/inputs/data_config/",fname_schema))

# get the response variable and store it as a string to a variable
varr <- dataschema$inputDatasets$binaryClassificationBaseMainInput$targetField

# some of the column names do not follow r-naming convention : they have special characters which must be changed
names(genericdata) <- gsub("%","x",names(genericdata))

# drop the id field 
## get the field name and store it as a variable
idfieldname <- dataschema$inputDatasets$binaryClassificationBaseMainInput$idField
#idfieldname <- as.symbol(idfieldname)

## drop it from the data
genericdata <- subset(genericdata,select = -c(eval(as.name(paste0(idfieldname)))))
#genericdata <- genericdata %>% dplyr::select(-all_of(idfieldname))

# function to train the model  and save it back into the mounted volume
lets_train <- function(dat,rvar){
 
  # get the names of the independent variables and store them as a vector 
  indvars <- names(dat)

  # reformulate function from the base stats package was quite a savior in creating the from a character vector. 
  # this will enable us to supply the response variable and the independent variables as characters and then reformulate will
  # evaluate them as variables. 
  theModel <- glm(reformulate(termlabels = indvars, response = rvar),family=binomial(link='logit'), data = dat)

  # save the model into the artifacts folder in the attached volume. 
  saveRDS(theModel, "./ml_vol/model/artifacts/model.rds")

}

# calling the model 
glmModel <- lets_train(dat=genericdata, rvar = varr)  

